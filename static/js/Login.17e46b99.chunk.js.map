{"version":3,"file":"static/js/Login.17e46b99.chunk.js","mappings":"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","sources":["webpack://react-social-network/./src/pages/login/Login.module.scss?ba59","pages/login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__PD3gr\",\"container\":\"Login_container__ZZctg\",\"title\":\"Login_title__Oms9y\",\"form\":\"Login_form__YfsK6\",\"emailInputContainer\":\"Login_emailInputContainer__S1LIi\",\"emailInput\":\"Login_emailInput__bi5Ry\",\"errorEmailInput\":\"Login_errorEmailInput__FFvPM\",\"emailInputDark\":\"Login_emailInputDark__Xxzr1\",\"passwordInputContainer\":\"Login_passwordInputContainer__R9e6h\",\"passwordInput\":\"Login_passwordInput__KOYyV\",\"errorPasswordInput\":\"Login_errorPasswordInput__cLcU5\",\"passwordInputDark\":\"Login_passwordInputDark__TxiRL\",\"label\":\"Login_label__N34hR\",\"rememberMeCheckbox\":\"Login_rememberMeCheckbox__iGZen\",\"rememberMeCheckboxDark\":\"Login_rememberMeCheckboxDark__mecgH\",\"rememberMe\":\"Login_rememberMe__vllrv\",\"captcha\":\"Login_captcha__460fc\",\"captchaImage\":\"Login_captchaImage__utfTs\",\"captchaInput\":\"Login_captchaInput__3gP4E\",\"captchaInputDark\":\"Login_captchaInputDark__sSQrH\",\"loginBtn\":\"Login_loginBtn__XDzue\",\"loginBtnDark\":\"Login_loginBtnDark__3Gg4K\",\"containerDark\":\"Login_containerDark__IMM-0\",\"errorEmailMessage\":\"Login_errorEmailMessage__XCD2d\",\"errorPasswordMessage\":\"Login_errorPasswordMessage__Xst32\"};","import React, { FC, useState } from 'react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { ReturnComponentType } from 'types'\nimport { useSelector } from 'react-redux'\nimport {\n  selectCaptchaUrl,\n  selectIsAuth,\n  selectIsDisabled,\n  selectIsLoading\n} from 'store/selectors'\nimport { InputType } from 'components/common/eye/types'\nimport { SmallLoader, ErrorCircle, Eye } from 'components'\nimport { LoginDataType } from 'api/auth/types'\nimport { useAppDispatch, useTheme } from 'hooks'\nimport { login } from 'store/asyncActions'\nimport { Navigate } from 'react-router-dom'\nimport { Path } from 'enums'\nimport style from './Login.module.scss'\n\nexport const Login: FC = (): ReturnComponentType => {\n  const dispatch = useAppDispatch()\n\n  const isAuth = useSelector(selectIsAuth)\n  const captchaUrl = useSelector(selectCaptchaUrl)\n  const isLoading = useSelector(selectIsLoading)\n  const isDisabled = useSelector(selectIsDisabled)\n\n  const [inputType, setInputType] = useState<InputType>('password')\n\n  const isDarkTheme = useTheme('dark')\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isValid }\n  } = useForm<LoginDataType>({\n    mode: 'onChange',\n    defaultValues: { email: 'free@samuraijs.com', password: 'free' }\n  })\n\n  const errorEmailMessage = errors?.email?.message\n  const errorPasswordMessage = errors?.password?.message\n  const emailSettings = {\n    required: 'Field is required',\n    pattern: {\n      value: /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/,\n      message: 'Incorrect email'\n    }\n  }\n  const passwordSettings = {\n    required: 'Field is required',\n    maxLength: { value: 64, message: 'Max 64 characters' }\n  }\n\n  const onSubmit: SubmitHandler<LoginDataType> = (loginData): void => {\n    dispatch(login(loginData))\n  }\n\n  if (isAuth) {\n    return <Navigate to={Path.PROFILE} />\n  }\n\n  return (\n    <div className={style.login}>\n      <div\n        className={`${style.container} ${isDarkTheme && style.containerDark}`}\n      >\n        <h2 className={style.title}>welcome</h2>\n\n        <form\n          noValidate\n          className={style.form}\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className={style.emailInputContainer}>\n            <input\n              className={`${style.emailInput} ${\n                isDarkTheme && style.emailInputDark\n              } ${errorEmailMessage && style.errorEmailInput}`}\n              placeholder='Enter email'\n              type='email'\n              {...register('email', emailSettings)}\n            />\n            {errors?.email && (\n              <>\n                <ErrorCircle />\n                <p className={style.errorEmailMessage}>{errorEmailMessage}</p>\n              </>\n            )}\n          </div>\n\n          <div className={style.passwordInputContainer}>\n            <input\n              className={`${style.passwordInput} ${\n                isDarkTheme && style.passwordInputDark\n              } ${errorPasswordMessage && style.errorPasswordInput} `}\n              type={inputType}\n              placeholder='Enter password'\n              {...register('password', passwordSettings)}\n            />\n            <Eye\n              inputType={inputType}\n              setInputType={setInputType}\n              errorPasswordMessage={errorPasswordMessage}\n            />\n\n            {errors?.password && (\n              <>\n                <ErrorCircle />\n                <p className={style.errorPasswordMessage}>\n                  {errorPasswordMessage}\n                </p>\n              </>\n            )}\n          </div>\n\n          <label className={style.label}>\n            <input\n              className={`${style.rememberMeCheckbox} ${\n                isDarkTheme && style.rememberMeCheckboxDark\n              }`}\n              type='checkbox'\n              {...register('rememberMe')}\n            />\n            <span className={style.rememberMe}>Remember me</span>\n          </label>\n\n          {captchaUrl && (\n            <div className={style.captcha}>\n              <img className={style.captchaImage} src={captchaUrl} />\n              <input\n                className={`${style.captchaInput} ${\n                  isDarkTheme && style.captchaInputDark\n                }`}\n                type='text'\n                placeholder='Code from the picture'\n                {...register('captcha')}\n              />\n            </div>\n          )}\n\n          <button\n            className={`${style.loginBtn} ${isDarkTheme && style.loginBtnDark}`}\n            disabled={!isValid || isDisabled}\n            type='submit'\n          >\n            {isLoading ? (\n              <SmallLoader darkColor={'#000'} lightColor={'#fff'} />\n            ) : (\n              'Login'\n            )}\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n"],"names":["Login","dispatch","useAppDispatch","isAuth","useSelector","selectIsAuth","captchaUrl","selectCaptchaUrl","isLoading","selectIsLoading","isDisabled","selectIsDisabled","useState","inputType","setInputType","isDarkTheme","useTheme","useForm","mode","defaultValues","email","password","register","handleSubmit","formState","errors","isValid","errorEmailMessage","message","errorPasswordMessage","to","Path","className","style","noValidate","onSubmit","loginData","login","placeholder","type","required","pattern","value","maxLength","src","disabled","darkColor","lightColor"],"sourceRoot":""}