{"version":3,"file":"static/js/Login.ee1b297f.chunk.js","mappings":"uSACA,EAAwB,qBAAxB,EAAyD,yBAAzD,EAA0F,qBAA1F,EAAsH,oBAAtH,EAAgK,mCAAhK,EAAgN,0BAAhN,EAA4P,+BAA5P,EAAoT,sCAApT,EAA0W,6BAA1W,EAA4Z,kCAA5Z,EAAsc,qBAAtc,EAAgf,kCAAhf,EAA+hB,0BAA/hB,EAAmkB,uBAAnkB,EAAymB,4BAAzmB,EAAopB,4BAAppB,EAA2rB,wBAA3rB,EAAuuB,iCAAvuB,EAA+xB,oC,SCalxBA,EAAY,WAA4B,IAAD,IAC5CC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IACzBC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAaN,EAAAA,EAAAA,IAAYO,EAAAA,IAE/B,GAAkCC,EAAAA,EAAAA,UAAoB,YAAtD,eAAOC,EAAP,KAAkBC,EAAlB,KAGA,GAIIC,EAAAA,EAAAA,IAAuB,CACzBC,KAAM,WACNC,cAAe,CAACC,MAAO,qBAAsBC,SAAU,UALvDC,EADF,EACEA,SACAC,EAFF,EAEEA,aAFF,IAGEC,UAAYC,EAHd,EAGcA,OAAQC,EAHtB,EAGsBA,QAMhBC,EAAiB,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAQL,aAAX,aAAG,EAAeQ,QACnCC,EAAoB,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAQJ,gBAAX,aAAG,EAAkBO,QAiB/C,OAAIvB,GACK,SAAC,KAAD,CAAUyB,GAAIC,EAAAA,GAAAA,WAIrB,gBAAKC,UAAWC,EAAhB,UACE,iBACED,UAAWC,EADb,WAGE,eAAID,UAAWC,EAAf,sBAEA,kBACEC,YAAU,EACVF,UAAWC,EACXE,SAAUZ,GAlB6B,SAACa,GAC9CjC,GAASkC,EAAAA,EAAAA,IAAMD,OAcX,WAKE,iBAAKJ,UAAWC,EAAhB,WACE,0BACED,UAAS,UAAKC,EAAL,YAAyBN,GAAqBM,GACvDK,YAAY,cACZC,KAAK,SACDjB,EAAS,QArCH,CACpBkB,SAAU,oBACVC,QAAS,CACPC,MAAO,8DACPd,QAAS,wBAmCI,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQL,SACP,iCACE,SAAC,KAAD,KACA,cAAGY,UAAWC,EAAd,SAAwCN,WAK9C,iBAAKK,UAAWC,EAAhB,WACE,0BACED,UAAS,UAAKC,EAAL,YAA4BJ,GAAwBI,EAApD,KACTM,KAAMxB,EACNuB,YAAY,kBACRhB,EAAS,WA7CA,CACvBkB,SAAU,oBACVG,UAAW,CAACD,MAAO,GAAId,QAAS,0BA6CxB,SAAC,KAAD,CACEb,UAAWA,EACXC,aAAcA,EACda,qBAAsBA,KAGjB,OAANJ,QAAM,IAANA,OAAA,EAAAA,EAAQJ,YACP,iCACE,SAAC,KAAD,KACA,cAAGW,UAAWC,EAAd,SACGJ,WAMT,mBAAOG,UAAWC,EAAlB,WACE,0BACED,UAAWC,EACXM,KAAK,YACDjB,EAAS,iBAEf,iBAAMU,UAAWC,EAAjB,4BAGDzB,IACC,iBAAKwB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAoBW,IAAKpC,KACzC,0BACEwB,UAAWC,EACXM,KAAK,OACLD,YAAY,yBACRhB,EAAS,iBAKnB,mBACEU,UAAWC,EACXY,UAAWnB,GAAWd,EACtB2B,KAAK,SAHP,SAKG7B,GACC,SAAC,KAAD,CAAaoC,MAAO,SAEpB","sources":["webpack://react-social-network/./src/pages/login/Login.module.scss?ba59","pages/login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__PD3gr\",\"container\":\"Login_container__ZZctg\",\"title\":\"Login_title__Oms9y\",\"form\":\"Login_form__YfsK6\",\"emailInputContainer\":\"Login_emailInputContainer__S1LIi\",\"emailInput\":\"Login_emailInput__bi5Ry\",\"errorEmailInput\":\"Login_errorEmailInput__FFvPM\",\"passwordInputContainer\":\"Login_passwordInputContainer__R9e6h\",\"passwordInput\":\"Login_passwordInput__KOYyV\",\"errorPasswordInput\":\"Login_errorPasswordInput__cLcU5\",\"label\":\"Login_label__N34hR\",\"rememberMeCheckbox\":\"Login_rememberMeCheckbox__iGZen\",\"rememberMe\":\"Login_rememberMe__vllrv\",\"captcha\":\"Login_captcha__460fc\",\"captchaImage\":\"Login_captchaImage__utfTs\",\"captchaInput\":\"Login_captchaInput__3gP4E\",\"loginBtn\":\"Login_loginBtn__XDzue\",\"errorEmailMessage\":\"Login_errorEmailMessage__XCD2d\",\"errorPasswordMessage\":\"Login_errorPasswordMessage__Xst32\"};","import React, {FC, useState} from \"react\"\r\nimport {SubmitHandler, useForm} from \"react-hook-form\"\r\nimport {ReturnComponentType} from \"types\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {selectCaptchaUrl, selectIsAuth, selectIsDisabled, selectIsLoading} from \"store/selectors\"\r\nimport {InputType} from \"components/common/eye/types\"\r\nimport {ErrorCircle, Eye, SmallLoader} from \"components\"\r\nimport {LoginDataType} from \"api/auth/types\"\r\nimport {useAppDispatch} from \"hooks\"\r\nimport {login} from \"store/asyncActions\"\r\nimport {Navigate} from \"react-router-dom\"\r\nimport {Path} from \"enums\"\r\nimport style from \"./Login.module.scss\"\r\n\r\nexport const Login: FC = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isAuth = useSelector(selectIsAuth)\r\n  const captchaUrl = useSelector(selectCaptchaUrl)\r\n  const isLoading = useSelector(selectIsLoading)\r\n  const isDisabled = useSelector(selectIsDisabled)\r\n\r\n  const [inputType, setInputType] = useState<InputType>(\"password\")\r\n\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: {errors, isValid}\r\n  } = useForm<LoginDataType>({\r\n    mode: \"onChange\",\r\n    defaultValues: {email: \"free@samuraijs.com\", password: \"free\"}\r\n  })\r\n\r\n  const errorEmailMessage = errors?.email?.message\r\n  const errorPasswordMessage = errors?.password?.message\r\n  const emailSettings = {\r\n    required: \"Field is required\",\r\n    pattern: {\r\n      value: /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/,\r\n      message: \"Incorrect email\"\r\n    }\r\n  }\r\n  const passwordSettings = {\r\n    required: \"Field is required\",\r\n    maxLength: {value: 64, message: \"Max 64 characters\"}\r\n  }\r\n\r\n  const onSubmit: SubmitHandler<LoginDataType> = (loginData): void => {\r\n    dispatch(login(loginData))\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Navigate to={Path.PROFILE}/>\r\n  }\r\n\r\n  return (\r\n    <div className={style.login}>\r\n      <div\r\n        className={style.container}\r\n      >\r\n        <h2 className={style.title}>welcome</h2>\r\n\r\n        <form\r\n          noValidate\r\n          className={style.form}\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <div className={style.emailInputContainer}>\r\n            <input\r\n              className={`${style.emailInput} ${errorEmailMessage && style.errorEmailInput}`}\r\n              placeholder=\"Enter email\"\r\n              type=\"email\"\r\n              {...register(\"email\", emailSettings)}\r\n            />\r\n            {errors?.email && (\r\n              <>\r\n                <ErrorCircle/>\r\n                <p className={style.errorEmailMessage}>{errorEmailMessage}</p>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <div className={style.passwordInputContainer}>\r\n            <input\r\n              className={`${style.passwordInput} ${errorPasswordMessage && style.errorPasswordInput} `}\r\n              type={inputType}\r\n              placeholder=\"Enter password\"\r\n              {...register(\"password\", passwordSettings)}\r\n            />\r\n            <Eye\r\n              inputType={inputType}\r\n              setInputType={setInputType}\r\n              errorPasswordMessage={errorPasswordMessage}\r\n            />\r\n\r\n            {errors?.password && (\r\n              <>\r\n                <ErrorCircle/>\r\n                <p className={style.errorPasswordMessage}>\r\n                  {errorPasswordMessage}\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <label className={style.label}>\r\n            <input\r\n              className={style.rememberMeCheckbox}\r\n              type=\"checkbox\"\r\n              {...register(\"rememberMe\")}\r\n            />\r\n            <span className={style.rememberMe}>Remember me</span>\r\n          </label>\r\n\r\n          {captchaUrl && (\r\n            <div className={style.captcha}>\r\n              <img className={style.captchaImage} src={captchaUrl}/>\r\n              <input\r\n                className={style.captchaInput}\r\n                type=\"text\"\r\n                placeholder=\"Code from the picture\"\r\n                {...register(\"captcha\")}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            className={style.loginBtn}\r\n            disabled={!isValid || isDisabled}\r\n            type=\"submit\"\r\n          >\r\n            {isLoading ? (\r\n              <SmallLoader color={\"#fff\"}/>\r\n            ) : (\r\n              \"Login\"\r\n            )}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["Login","dispatch","useAppDispatch","isAuth","useSelector","selectIsAuth","captchaUrl","selectCaptchaUrl","isLoading","selectIsLoading","isDisabled","selectIsDisabled","useState","inputType","setInputType","useForm","mode","defaultValues","email","password","register","handleSubmit","formState","errors","isValid","errorEmailMessage","message","errorPasswordMessage","to","Path","className","style","noValidate","onSubmit","loginData","login","placeholder","type","required","pattern","value","maxLength","src","disabled","color"],"sourceRoot":""}